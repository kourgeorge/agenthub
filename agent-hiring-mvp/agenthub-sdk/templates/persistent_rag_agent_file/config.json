{
  "name": "File RAG Agent",
  "description": "A RAG (Retrieval-Augmented Generation) agent that processes files directly from URLs with embedded access tokens, featuring persistent vector database storage and efficient document indexing.",
  "version": "1.0.0",
  "entry_point": "persistent_rag_agent_file.py",
  "agent_type": "persistent",
  "agent_class": "FileRAGAgent",
  "requires_initialization": true,
  "author": "AgentHub Team",
  "email": "team@agenthub.com",
  "pricing_model": "per_use",
  "price_per_use": 0.3,
  "requirements": [
    "langchain",
    "langchain-openai",
    "langchain-community",
    "faiss-cpu",
    "requests",
    "python-dotenv",
    "beautifulsoup4",
    "pypdf"
  ],
  "lifecycle": {
    "initialize": "initialize",
    "execute": "execute",
    "cleanup": "cleanup"
  },
  "config_schema": {
    "functions": [
      {
        "name": "initialize",
        "description": "Initialize the RAG agent by indexing the specified uploaded files",
        "inputSchema": {
          "type": "object",
          "properties": {
            "file_references": {
              "type": "array",
              "description": "Array of full URLs with access tokens for uploaded documents to index for RAG",
              "items": {
                "type": "string",
                "format": "file-reference"
              },
              "minItems": 1,
              "maxItems": 10
            },
            "model_name": {
              "type": "string",
              "description": "OpenAI model to use for LLM",
              "enum": [
                "gpt-4o-mini",
                "gpt-3.5-turbo",
                "gpt-4",
                "gpt-4o"
              ],
              "default": "gpt-4o-mini"
            },
            "temperature": {
              "type": "number",
              "description": "Temperature for LLM responses",
              "minimum": 0,
              "maximum": 2,
              "default": 0
            },
            "chunk_size": {
              "type": "integer",
              "description": "Size of text chunks for processing",
              "minimum": 100,
              "maximum": 4000,
              "default": 1000
            },
            "chunk_overlap": {
              "type": "integer",
              "description": "Overlap between text chunks",
              "minimum": 0,
              "maximum": 1000,
              "default": 200
            },
            "agent_id": {
              "type": "string",
              "description": "Unique identifier for this agent instance (used for storage isolation)",
              "default": "default"
            }
          },
          "required": [
            "file_references"
          ],
          "additionalProperties": false
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Initialization status",
              "enum": [
                "success",
                "error"
              ]
            },
            "message": {
              "type": "string",
              "description": "Initialization result message"
            },
            "indexed_pages": {
              "type": "integer",
              "description": "Number of pages successfully indexed"
            },
            "total_chunks": {
              "type": "integer",
              "description": "Total number of text chunks created"
            }
          },
          "required": [
            "status",
            "message"
          ],
          "additionalProperties": false
        }
      },
      {
        "name": "execute",
        "description": "Execute a RAG query against the indexed content",
        "inputSchema": {
          "type": "object",
          "properties": {
            "question": {
              "type": "string",
              "description": "Question to ask about the indexed content",
              "minLength": 1
            }
          },
          "required": [
            "question"
          ],
          "additionalProperties": false
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "answer": {
              "type": "string",
              "description": "Answer to the question based on indexed content"
            },
            "confidence": {
              "type": "number",
              "description": "Confidence score of the answer (0-1)",
              "minimum": 0,
              "maximum": 1
            },
            "sources": {
              "type": "array",
              "description": "List of source documents used for the answer",
              "items": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string"
                  },
                  "file_type": {
                    "type": "string"
                  },
                  "relevance_score": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "required": [
            "answer"
          ],
          "additionalProperties": false
        }
      },
      {
        "name": "cleanup",
        "description": "Clean up resources and perform cleanup operations",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Cleanup status",
              "enum": [
                "success",
                "error"
              ]
            },
            "message": {
              "type": "string",
              "description": "Cleanup result message"
            },
            "resources_freed": {
              "type": "array",
              "description": "List of resources that were freed",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "status",
            "message"
          ],
          "additionalProperties": false
        }
      }
    ]
  },
  "capabilities": [
    "document_indexing",
    "rag_queries",
    "persistent_state",
    "file_processing",
    "pdf_processing",
    "text_processing"
  ],
  "tags": [
    "rag",
    "persistent",
    "document-qa",
    "knowledge-base",
    "openai",
    "langchain",
    "file-upload"
  ],
  "category": "research"
} 